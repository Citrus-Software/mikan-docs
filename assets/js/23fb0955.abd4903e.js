"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8861],{8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var o=r(6540);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}},9523:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"references/tpl/core/joints","title":"core.joints","description":"Chain-based joint rig template module","source":"@site/docs/references/tpl/core/joints.md","sourceDirName":"references/tpl/core","slug":"/references/tpl/core/joints","permalink":"/mikan-docs/docs/references/tpl/core/joints","draft":false,"unlisted":false,"editUrl":"https://github.com/citrus-software/mikan-docs/tree/main/packages/create-docusaurus/templates/shared/docs/references/tpl/core/joints.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"core.group","permalink":"/mikan-docs/docs/references/tpl/core/group"},"next":{"title":"core.xform","permalink":"/mikan-docs/docs/references/tpl/core/xform"}}');var s=r(4848),i=r(8453);const c={},l="core.joints",t={},d=[{value:"Overview",id:"overview",level:2},{value:"Options",id:"options",level:2},{value:"Transform Behavior",id:"transform-behavior",level:3},{value:"Orientation",id:"orientation",level:3}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"corejoints",children:"core.joints"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Chain-based joint rig template module"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"core.joints"})," creates a rig controller for each joint in the input template chain. Each controller consists of a hierarchy of nodes used for deformation and animation. By default, the structure includes:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"root"})," node"]}),"\n",(0,s.jsxs)(n.li,{children:["A controller (",(0,s.jsx)(n.code,{children:"ctrl"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["A ",(0,s.jsx)(n.code,{children:"skin"})," node for deformation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"})," (",(0,s.jsx)(n.em,{children:"enum"}),", default: ",(0,s.jsx)(n.code,{children:"joint"}),"): Rig hierarchy type.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"joint"}),": All rig joints are parented under their respective roots, allowing proper scale transmission."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"transform"}),": Controllers form a continuous hierarchy, resulting in cumulative scaling."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unchain"})," (",(0,s.jsx)(n.em,{children:"bool"}),", default: ",(0,s.jsx)(n.code,{children:"off"}),"): Prevents hierarchical parenting between generated controllers."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"do_pose"})," (",(0,s.jsx)(n.em,{children:"bool"}),", default: ",(0,s.jsx)(n.code,{children:"on"}),"): Adds a ",(0,s.jsx)(n.code,{children:"pose"})," node above the controller (for driven key control)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"add_nodes"})," (",(0,s.jsx)(n.em,{children:"yaml"}),", default: ",(0,s.jsx)(n.code,{children:"null"}),"): Injects additional nodes into the controller hierarchy.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inf"}),": Adds an ",(0,s.jsx)(n.code,{children:"inf_{name}"})," node above the controller."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[inf, pose]"}),": Adds ",(0,s.jsx)(n.code,{children:"inf_{name}"})," and ",(0,s.jsx)(n.code,{children:"pose_{name}"})," in that order."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[c, dyn]"}),": Adds a ",(0,s.jsx)(n.code,{children:"dyn_{name}"})," node between the controller and the skin joint."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"transform-behavior",children:"Transform Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent_scale"})," (",(0,s.jsx)(n.em,{children:"bool"}),", default: ",(0,s.jsx)(n.code,{children:"off"}),"): Enables scale propagation between controllers (segment scale compensate between ",(0,s.jsx)(n.code,{children:"skin"})," and ",(0,s.jsx)(n.code,{children:"root"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rotate_order"})," (",(0,s.jsx)(n.em,{children:"enum"}),", default: ",(0,s.jsx)(n.code,{children:"xyz"}),"): Rotate order applied to all rig elements."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"orientation",children:"Orientation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"flip_orient"})," (",(0,s.jsx)(n.em,{children:"bool"}),", default: ",(0,s.jsx)(n.code,{children:"off"}),"): Flips root orientation for symmetrical translation behavior."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);