"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6847],{7079:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"references/tpl/digit/legacy","title":"digit.legacy","description":"Finger rig module based on the core.bones structure","source":"@site/docs/references/tpl/digit/legacy.md","sourceDirName":"references/tpl/digit","slug":"/references/tpl/digit/legacy","permalink":"/mikan-docs/docs/references/tpl/digit/legacy","draft":false,"unlisted":false,"editUrl":"https://github.com/citrus-software/mikan-docs/tree/main/packages/create-docusaurus/templates/shared/docs/references/tpl/digit/legacy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"arm.legacy","permalink":"/mikan-docs/docs/references/tpl/arm/legacy"},"next":{"title":"leg.legacy","permalink":"/mikan-docs/docs/references/tpl/leg/legacy"}}');var r=i(4848),c=i(8453);const o={},l="digit.legacy",d={},t=[{value:"Overview",id:"overview",level:2},{value:"Options",id:"options",level:2},{value:"Node Hierarchy Options (same as <code>core.bones</code>)",id:"node-hierarchy-options-same-as-corebones",level:3},{value:"Orientation and Rotation",id:"orientation-and-rotation",level:3},{value:"Orientation Axes",id:"orientation-axes",level:4}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"digitlegacy",children:"digit.legacy"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Finger rig module based on the ",(0,r.jsx)(n.code,{children:"core.bones"})," structure"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"digit.legacy"})," creates a controller rig for each joint in a digit (finger) chain, following the standard rig structure used in ",(0,r.jsx)(n.code,{children:"core.bones"}),". Each controller setup includes a hierarchy of nodes: a root, a posing node (for driven keys), a controller, and a skinning node."]}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"meta"})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"on"}),"): Renames the first controller in the chain with the ",(0,r.jsx)(n.code,{children:"meta"})," suffix and excludes it from aim behavior."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shear"})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"off"}),"): Enables a shearing rig. Adds two extra joints per phalanx (base and tip)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shear_values"})," (",(0,r.jsx)(n.em,{children:"list[float]"}),"): Default shearing values (editable after rig creation)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target_parent"})," (",(0,r.jsx)(n.em,{children:"node"}),", default: ",(0,r.jsx)(n.code,{children:"*::hooks.digits"}),"): Parent ID used for the aim rig. Prioritizes parent template."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target_weights"})," (",(0,r.jsx)(n.em,{children:"list[float]"}),"): Default aim constraint weights per phalanx."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"node-hierarchy-options-same-as-corebones",children:["Node Hierarchy Options (same as ",(0,r.jsx)(n.code,{children:"core.bones"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"do_pose"})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"off"}),"): Adds a posing node above the controller."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"add_nodes"})," (",(0,r.jsx)(n.em,{children:"str"}),", default: ",(0,r.jsx)(n.code,{children:"null"}),"): Adds additional nodes to the controller hierarchy.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"inf"})," creates an ",(0,r.jsx)(n.code,{children:"inf_{name}"})," node above the controller."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[inf, pose]"})," adds ",(0,r.jsx)(n.code,{children:"inf_{name}"})," and ",(0,r.jsx)(n.code,{children:"pose_{name}"})," in order."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[c, dyn]"})," adds a ",(0,r.jsx)(n.code,{children:"dyn_{name}"})," node between controller and skin joint."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parent_scale"})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"off"}),"): Enables scale transmission between controllers (segment scale compensation)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"orientation-and-rotation",children:"Orientation and Rotation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rotate_order"})," (",(0,r.jsx)(n.em,{children:"enum"}),", default: ",(0,r.jsx)(n.code,{children:"xyz"}),"): Rotation order for all rig elements."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"orient"})," (",(0,r.jsx)(n.em,{children:"enum"}),", default: ",(0,r.jsx)(n.code,{children:"copy"}),"): Orientation mode for the joint chain.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"copy"}),": Matches template orientation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"auto"}),": Automatic orientation (see axis options below)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"orientation-axes",children:"Orientation Axes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"aim_axis"})," (",(0,r.jsx)(n.em,{children:"str"}),", default: ",(0,r.jsx)(n.code,{children:"y"}),"): Main aim axis for controller orientation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"up_axis"})," (",(0,r.jsx)(n.em,{children:"str"}),", default: ",(0,r.jsx)(n.code,{children:"z"}),"): Up axis for controller orientation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"up_dir"})," (",(0,r.jsx)(n.em,{children:"enum"}),", default: ",(0,r.jsx)(n.code,{children:"auto"}),"): Determines up vector calculation mode.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"auto"}),": Calculated from the geometry of the chain."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"+x"}),", ",(0,r.jsx)(n.code,{children:"-x"}),", ",(0,r.jsx)(n.code,{children:"+y"}),", ",(0,r.jsx)(n.code,{children:"-y"}),", ",(0,r.jsx)(n.code,{children:"+z"}),", ",(0,r.jsx)(n.code,{children:"-z"}),": Scene-based up vectors."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"up_auto"})," (",(0,r.jsx)(n.em,{children:"enum"}),", default: ",(0,r.jsx)(n.code,{children:"average"}),"): Auto up calculation method.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"average"}),": Averages triangle normals."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"each"}),": Calculates unique up for each joint."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"first"}),": Uses first triangle's up vector for the entire chain."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"last"}),": Uses last triangle's up vector for the entire chain."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);