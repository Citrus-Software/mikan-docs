"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8886],{6541:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"references/mod/drive","title":"drive","description":"Connects one or more plugs using animation curves (driven keys).","source":"@site/docs/references/mod/drive.md","sourceDirName":"references/mod","slug":"/references/mod/drive","permalink":"/mikan-docs/references/mod/drive","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"delete","permalink":"/mikan-docs/references/mod/delete"},"next":{"title":"driver.angle","permalink":"/mikan-docs/references/mod/driver/angle"}}');var d=s(4848),i=s(8453);const t={},c="drive",l={},o=[{value:"Notes",id:"notes",level:2},{value:"Options",id:"options",level:2},{value:"Examples",id:"examples",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"drive",children:"drive"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"Connects one or more plugs using animation curves (driven keys)."}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"This modifier allows you to drive plug values via animation curves based on a controller or attribute."}),"\n",(0,d.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["The ",(0,d.jsx)(n.strong,{children:"Mikan interface"})," provides a drive command generator under the ",(0,d.jsx)(n.strong,{children:'"Posing"'})," tab. It creates the driven key curves and generates the necessary ",(0,d.jsx)(n.code,{children:"drive"})," commands for rig rebuilding."]}),"\n",(0,d.jsxs)(n.li,{children:["You can also ",(0,d.jsx)(n.strong,{children:"convert any animation curve"})," (manual or not) using a utility in the ",(0,d.jsx)(n.strong,{children:"Mikan rig toolbox"}),". The command will output the required YAML block directly in the Script Editor."]}),"\n",(0,d.jsxs)(n.li,{children:["\u26a0\ufe0f Only the ",(0,d.jsx)(n.strong,{children:"recommended syntax"})," is documented here. You may encounter legacy variations in older rigs \u2014 they remain supported but are not advised."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"node"})})," (",(0,d.jsx)(n.em,{children:"node"}),"): The driver plug or node."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"plug"})})," (",(0,d.jsx)(n.em,{children:"str"}),", optional): If ",(0,d.jsx)(n.code,{children:"node"})," refers only to the node, use this to specify which plug on it is the driver."]}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"<id>@<plug>"})})," (",(0,d.jsx)(n.em,{children:"dict"}),"): Target plug and its animation curve definition.","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"<float>"})})," (",(0,d.jsx)(n.em,{children:"float"})," | ",(0,d.jsx)(n.em,{children:"dict"}),"): Key definition.","\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Direct value (e.g. ",(0,d.jsx)(n.code,{children:"0.5: 1"}),") creates a spline key by default."]}),"\n",(0,d.jsxs)(n.li,{children:["To customize curves, use a dictionary:","\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Key"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"v"})}),(0,d.jsx)(n.td,{children:"float"}),(0,d.jsx)(n.td,{children:"Value of the key."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"tan"}),", ",(0,d.jsx)(n.code,{children:"itan"}),", ",(0,d.jsx)(n.code,{children:"otan"})]}),(0,d.jsx)(n.td,{children:"str"}),(0,d.jsxs)(n.td,{children:["Tangent types (",(0,d.jsx)(n.code,{children:"spline"}),", ",(0,d.jsx)(n.code,{children:"linear"}),", ",(0,d.jsx)(n.code,{children:"flat"}),", ",(0,d.jsx)(n.code,{children:"step"}),", ",(0,d.jsx)(n.code,{children:"auto"}),", etc)."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"ix"}),", ",(0,d.jsx)(n.code,{children:"iy"})]}),(0,d.jsx)(n.td,{children:"float"}),(0,d.jsx)(n.td,{children:"Tangent in (x, y), for custom tangents."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"ox"}),", ",(0,d.jsx)(n.code,{children:"oy"})]}),(0,d.jsx)(n.td,{children:"float"}),(0,d.jsx)(n.td,{children:"Tangent out (x, y), for custom tangents."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"pre"}),", ",(0,d.jsx)(n.code,{children:"post"})]}),(0,d.jsx)(n.td,{children:"str"}),(0,d.jsxs)(n.td,{children:["Pre-/Post-infinity behavior (",(0,d.jsx)(n.code,{children:"linear"}),", ",(0,d.jsx)(n.code,{children:"constant"}),", ",(0,d.jsx)(n.code,{children:"cycle"}),", ",(0,d.jsx)(n.code,{children:"cycleOffset"}),", ",(0,d.jsx)(n.code,{children:"oscillate"}),")."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"tan"})}),(0,d.jsx)(n.td,{children:"str"}),(0,d.jsxs)(n.td,{children:["Default tangent style for the curve (default: ",(0,d.jsx)(n.code,{children:"spline"}),")."]})]})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"flip"})})," (",(0,d.jsx)(n.em,{children:"bool"}),", default: ",(0,d.jsx)(n.code,{children:"false"}),"): Multiplies all curve values by ",(0,d.jsx)(n.code,{children:"-1"})," for mirrored branches."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"scale"})})," (",(0,d.jsx)(n.em,{children:"float"}),", default: ",(0,d.jsx)(n.code,{children:"1.0"}),"): Scales all key values (useful for rig rescaling)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:(0,d.jsx)(n.code,{children:"weight"})})," (",(0,d.jsx)(n.em,{children:"node"}),", optional): Plug that multiplies all output values from this modifier."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.p,{children:"Compact syntax:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yml",children:"drive:\n  node: lipsync::ctrls.0@t.x\n  chan_face::node@m_stretch_L:\n    { -0.3: -1, 0: 0, 0.3: 1, pre: constant, post: constant }\n  chan_face::node@m_stretch_R: { -0.3: -1, 0: 0, 0.3: 1 }\n"})}),"\n",(0,d.jsx)(n.p,{children:"Expanded syntax:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yml",children:"drive:\nnode: lipsync::ctrls.0@t.x\nchan_face::node@m_stretch_L:\n  -0.3: -1\n  0: 0\n  0.3: 1\n  pre: constant\n  post: constant\n  chan_face::node@m_stretch_R:\n    -0.3: -1\n    0: 0\n    0.3: 1\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const d={},i=r.createContext(d);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);