"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[121],{1255:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"references/tpl/core/bones","title":"core.bones","description":"Generic FK controller chain module","source":"@site/docs/references/tpl/core/bones.md","sourceDirName":"references/tpl/core","slug":"/references/tpl/core/bones","permalink":"/mikan-docs/references/tpl/core/bones","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using Modifiers","permalink":"/mikan-docs/guides/tuto04_modifiers/mikan_modifiers_EN"},"next":{"title":"core.group","permalink":"/mikan-docs/references/tpl/core/group"}}');var i=r(4848),s=r(8453);const l={},c="core.bones",t={},d=[{value:"Overview",id:"overview",level:2},{value:"Options",id:"options",level:2},{value:"Transform Behavior",id:"transform-behavior",level:3},{value:"Orientation",id:"orientation",level:3},{value:"Auto Orientation Controls",id:"auto-orientation-controls",level:4}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"corebones",children:"core.bones"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Generic FK controller chain module"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"core.bones"})," module generates a controller rig for each joint in a template chain. Each controller is built from a hierarchy of nodes that support both deformation and animation layers. By default, the structure includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"root"})," node"]}),"\n",(0,i.jsxs)(n.li,{children:["A controller (",(0,i.jsx)(n.code,{children:"ctrl"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"skin"})," node (deformation output)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"do_pose"})," (",(0,i.jsx)(n.em,{children:"bool"}),", default: ",(0,i.jsx)(n.code,{children:"off"}),"): Adds a ",(0,i.jsx)(n.code,{children:"pose"})," node between the root and controller (for driven key control)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"add_nodes"})," (",(0,i.jsx)(n.em,{children:"str"})," | ",(0,i.jsx)(n.em,{children:"list[str]"}),", default: ",(0,i.jsx)(n.code,{children:"null"}),"): Adds custom nodes to the hierarchy.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"inf"})," inserts a node ",(0,i.jsx)(n.code,{children:"inf_{name}"})," above the controller."]}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"[inf, pose]"})," inserts both nodes ",(0,i.jsx)(n.code,{children:"inf_{name}"})," and ",(0,i.jsx)(n.code,{children:"pose_{name}"})," in order."]}),"\n",(0,i.jsxs)(n.li,{children:["Example: ",(0,i.jsx)(n.code,{children:"[c, dyn]"})," adds ",(0,i.jsx)(n.code,{children:"dyn_{name}"})," between the controller and the skin joint."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"transform-behavior",children:"Transform Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parent_scale"})," (",(0,i.jsx)(n.em,{children:"bool"}),", default: ",(0,i.jsx)(n.code,{children:"off"}),"): Enables scale propagation between controllers (affects segment scale compensation)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"rotate_order"})," (",(0,i.jsx)(n.em,{children:"enum"}),", default: ",(0,i.jsx)(n.code,{children:"xyz"}),"): Sets the rotation order on the controller hierarchy."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"orientation",children:"Orientation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"flip_orient"})," (",(0,i.jsx)(n.em,{children:"bool"}),", default: ",(0,i.jsx)(n.code,{children:"off"}),"): Flips root orientation to produce symmetrical translation behavior."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"orient"})," (",(0,i.jsx)(n.em,{children:"enum"}),", default: ",(0,i.jsx)(n.code,{children:"copy"}),"): Sets the orientation strategy for the controller rig.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"copy"}),": Copies orientation from the template joint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"auto"}),": Automatically orients joints using the options below."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"world"}),": Aligns orientation to the world axes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"parent"}),": Aligns to the parent rig joint."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"auto-orientation-controls",children:"Auto Orientation Controls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"aim_axis"})," (",(0,i.jsx)(n.em,{children:"str"}),", default: ",(0,i.jsx)(n.code,{children:"y"}),"): Main axis pointing toward the next joint in the chain."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"up_axis"})," (",(0,i.jsx)(n.em,{children:"str"}),", default: ",(0,i.jsx)(n.code,{children:"z"}),"): Secondary axis used for local up vector."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"up_dir"})," (",(0,i.jsx)(n.em,{children:"enum"}),", default: ",(0,i.jsx)(n.code,{children:"auto"}),"): Mode for computing the up vector.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"auto"}),": Based on geometry of the joint chain."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"+x"}),", ",(0,i.jsx)(n.code,{children:"-x"}),", ",(0,i.jsx)(n.code,{children:"+y"}),", ",(0,i.jsx)(n.code,{children:"-y"}),", ",(0,i.jsx)(n.code,{children:"+z"}),", ",(0,i.jsx)(n.code,{children:"-z"}),": Fixed world-space directions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"up_auto"})," (",(0,i.jsx)(n.em,{children:"enum"}),", default: ",(0,i.jsx)(n.code,{children:"average"}),"): Strategy for ",(0,i.jsx)(n.code,{children:"auto"})," up vector calculation.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"average"}),": Averages all segment triangles."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"each"}),": Computes individual up vectors per joint."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"first"}),": Uses first segment\u2019s up vector for all."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"last"}),": Uses last segment\u2019s up vector for all."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>c});var o=r(6540);const i={},s=o.createContext(i);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);