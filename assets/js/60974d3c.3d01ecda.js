"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8603],{8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},9570:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"references/mod/connect","title":"connect","description":"Establishes a connection between two plugs, optionally applying basic math operations (multiply, divide, add, subtract, reverse).","source":"@site/docs/references/mod/connect.md","sourceDirName":"references/mod","slug":"/references/mod/connect","permalink":"/mikan-docs/docs/references/mod/connect","draft":false,"unlisted":false,"editUrl":"https://github.com/citrus-software/mikan-docs/tree/main/packages/create-docusaurus/templates/shared/docs/references/mod/connect.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"legacy","permalink":"/mikan-docs/docs/references/tpl/wheel/legacy"},"next":{"title":"constraint","permalink":"/mikan-docs/docs/references/mod/constraint"}}');var t=s(4848),r=s(8453);const c={},l="connect",o={},d=[{value:"Options",id:"options",level:2},{value:"Examples",id:"examples",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"connect",children:"connect"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Establishes a connection between two plugs, optionally applying basic math operations (",(0,t.jsx)(n.em,{children:"multiply"}),", ",(0,t.jsx)(n.em,{children:"divide"}),", ",(0,t.jsx)(n.em,{children:"add"}),", ",(0,t.jsx)(n.em,{children:"subtract"}),", ",(0,t.jsx)(n.em,{children:"reverse"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If the destination plug is already connected, the new input will be inserted with priority in the input list."}),"\n",(0,t.jsx)(n.p,{children:"\u26a0\ufe0f This modifier is considered legacy for math operations. For more advanced and flexible usage, prefer using the expression modifier."}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"input"})})," (",(0,t.jsx)(n.em,{children:"plug"}),"): Single source plug."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"inputs"})})," (",(0,t.jsx)(n.em,{children:"list[plug]"}),", optional): Multiple source plugs (used with operators requiring two inputs)."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"node"})})," (",(0,t.jsx)(n.em,{children:"plug"}),"): Destination plug."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"nodes"})})," (",(0,t.jsx)(n.em,{children:"list[plug]"}),"): List of destination plugs."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"clamp"})})," (",(0,t.jsx)(n.em,{children:"tuple[float, float]"}),", optional): Clamps the result between [min, max]."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"flip"})})," (",(0,t.jsx)(n.em,{children:"bool"}),"): Applies a * -1 multiplier on mirrored branches only."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"op"})})," (",(0,t.jsx)(n.em,{children:"str"}),"): Math operation to apply:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"reverse"})," (1 input): 1 - a"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"add"})," (2 inputs): a + b"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sub"})," (2 inputs): a - b"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mult"})," (2 inputs): a * b"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"div"})," (2 inputs): a / b"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pow"})," (2 inputs): a ^ b"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:"Simple direct connection:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"connect:\n  input: <src>@t.x\n  node: <dst>@t.x\n"})}),"\n",(0,t.jsx)(n.p,{children:"Connexion with math operation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"connect:\n  node: <dst>@t.x\n  op: mult\n  inputs:\n    - <src>@t.x\n    - 2\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);