"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4823],{4884:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>f,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"references/deformers/cluster","title":"cluster","description":"Applies a common transformation to a set of points..","source":"@site/docs/references/deformers/cluster.md","sourceDirName":"references/deformers","slug":"/references/deformers/cluster","permalink":"/mikan-docs/references/deformers/cluster","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"blend","permalink":"/mikan-docs/references/deformers/blend"},"next":{"title":"delta Mush","permalink":"/mikan-docs/references/deformers/deltamush"}}');var r=s(4848),l=s(8453);const t={},i="cluster",d={},c=[{value:"Features",id:"features",level:2},{value:"Options",id:"options",level:2},{value:"Hooks",id:"hooks",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cluster",children:"cluster"})}),"\n",(0,r.jsx)(n.p,{children:"Applies a common transformation to a set of points.."}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsx)(n.p,{children:"The cluster allows you to grab a set of points and apply a transformation matrix driven by a rig controller."}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"handle (id)"})," : controller node used for manipulation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bind_pose (id)"})," : root node of the controller"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"soft (bool, default: off)"})," : enables soft mode"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"falloff_mode (int, default: 0)"})," : falloff propagation type","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"0"}),": volume"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"1"}),": geodesic"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"falloff_radius (float, default: 1.0, min: 0)"})," : radius of the falloff sphere"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"falloff_center (float3, default: [0, 0, 0])"})," : world-space position of the falloff center"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"falloff_pivot (id)"})," : positioning node for the origin of the soft mode (usually the same as ",(0,r.jsx)(n.code,{children:"bind_pose"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"falloff_curve (dict)"})," : construction data for the falloff curve"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"maps (dict[int]: WeightMap)"})," : cluster weightmap (only works with index 0)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enable"}),", ",(0,r.jsx)(n.code,{children:"envelope (float, min: 0, max: 1)"})," : weight of the deformation application"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"radius"}),", ",(0,r.jsx)(n.code,{children:"falloff_radius (float)"})," : radius of the soft mode"]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var o=s(6540);const r={},l=o.createContext(r);function t(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);