"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3217],{3069:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"references/mod/hook","title":"hook","description":"Constrains one or more nodes to one or more target nodes using matrix connections.","source":"@site/docs/references/mod/hook.md","sourceDirName":"references/mod","slug":"/references/mod/hook","permalink":"/mikan-docs/references/mod/hook","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hide","permalink":"/mikan-docs/references/mod/hide"},"next":{"title":"locator","permalink":"/mikan-docs/references/mod/locator"}}');var s=o(4848),t=o(8453);const d={},i="hook",c={},l=[{value:"Options",id:"options",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"hook",children:"hook"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Constrains one or more nodes to one or more target nodes using matrix connections."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This modifier is used to connect transforms (SRT) of nodes directly to targets using matrix constraints."}),"\n",(0,s.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"node"})})," (",(0,s.jsx)(n.em,{children:"node"}),", optional): Single node to be constrained or re-parented."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nodes"})})," (",(0,s.jsx)(n.em,{children:"list[node]"}),", optional): List of nodes to be constrained or re-parented. If both ",(0,s.jsx)(n.code,{children:"node"})," and ",(0,s.jsx)(n.code,{children:"nodes"})," are provided, ",(0,s.jsx)(n.code,{children:"nodes"})," takes precedence."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"target"})})," (",(0,s.jsx)(n.em,{children:"node"}),"): Main driver node."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"targets"})})," (",(0,s.jsx)(n.em,{children:"list[node]"}),"): Additional driver nodes. Combined with ",(0,s.jsx)(n.code,{children:"target"})," if both are set."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"parent"})})," (",(0,s.jsx)(n.em,{children:"node"}),", optional): Node under which the hook will be parented after creation. Defaults to the parent of the constrained node(s)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"group"})})," (",(0,s.jsx)(n.em,{children:"bool"}),", default: ",(0,s.jsx)(n.code,{children:"false"}),"): If ",(0,s.jsx)(n.code,{children:"true"}),", a hook group node is created and constrained to the targets, with the specified nodes parented under it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"weights"})})," (",(0,s.jsx)(n.em,{children:"list[float]"}),", default: ",(0,s.jsx)(n.code,{children:"1.0"}),"): Constraint weights for each target. Defaults to ",(0,s.jsx)(n.code,{children:"1.0"})," per target."]}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"name"})})," (",(0,s.jsx)(n.em,{children:"str"}),", optional): Custom name for the hook node (without the ",(0,s.jsx)(n.code,{children:"hook_"})," prefix). This name is also used in the generated node's ID tag. If not specified, the name is automatically generated from the target names."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"output",children:"Output"}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"group: true"}),", a hook node named ",(0,s.jsx)(n.code,{children:"<id>::mod.hook.<index|name>"})," will be created and constrained to the targets."]}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"group: false"}),", no hook node is created. Nodes are directly constrained to the targets using matrix connections."]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Constraining multiple nodes directly to targets (no hook node created):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"hook:\n  nodes:\n    - node_id_1\n    - node_id_2\n  targets:\n    - driver_1\n    - driver_2\n  weights: [0.5, 0.5]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Creating a hook node as a matrix-constrained group:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yml",children:"hook:\n  nodes:\n    - node_id_1\n  targets:\n    - source_node\n  group: true\n  name: my_hook_group\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var r=o(6540);const s={},t=r.createContext(s);function d(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);