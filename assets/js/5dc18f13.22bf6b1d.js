"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5622],{3670:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"references/mod/space","title":"space","description":"Creates a constraint switch on a controller\'s parent.","source":"@site/docs/references/mod/space.md","sourceDirName":"references/mod","slug":"/references/mod/space","permalink":"/mikan-docs/docs/references/mod/space","draft":false,"unlisted":false,"editUrl":"https://github.com/citrus-software/mikan-docs/tree/main/packages/create-docusaurus/templates/shared/docs/references/mod/space.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"phonemes","permalink":"/mikan-docs/docs/references/mod/shape/phonemes"},"next":{"title":"tag","permalink":"/mikan-docs/docs/references/mod/tag"}}');var r=s(4848),o=s(8453);const i={},c="space",l={},d=[{value:"Options",id:"options",level:2},{value:"Attribute Name Resolution",id:"attribute-name-resolution",level:2},{value:"Example",id:"example",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"space",children:"space"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Creates a constraint switch on a controller's parent."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This modifier sets up a space-switching system allowing a controller to dynamically change its parent based on a list of targets. It is useful for animators who need to change follow behavior (e.g., switching from world space to head or pelvis space)."}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"node"})})," (",(0,r.jsx)(n.em,{children:"node"}),", optional): The controller where the switch attributes will be created. Defaults to the modifier's ",(0,r.jsx)(n.code,{children:"node"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"root"})})," (",(0,r.jsx)(n.em,{children:"node"}),", optional): The node that receives the actual constraint. Defaults to the parent of the ",(0,r.jsx)(n.code,{children:"node"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"orient"})})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"false"}),"): Enables rotation-only constraints. The switch will be named ",(0,r.jsx)(n.code,{children:"follow"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"point"})})," (",(0,r.jsx)(n.em,{children:"bool"}),", default: ",(0,r.jsx)(n.code,{children:"false"}),"): Enables position-only constraints. The switch will be named ",(0,r.jsx)(n.code,{children:"pin"}),". Ignored if ",(0,r.jsx)(n.code,{children:"orient"})," is enabled."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"target"})}),", ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"targets"})})," (",(0,r.jsx)(n.em,{children:"node"})," | ",(0,r.jsx)(n.em,{children:"list[node]"}),"): List of nodes acting as constraint targets (drivers for the switch)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"default"})})," (",(0,r.jsx)(n.em,{children:"list[float]"}),", optional): Default weights for each target. Defaults to ",(0,r.jsx)(n.code,{children:"[0, 0, ...]"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"rest_name"})})," (",(0,r.jsx)(n.em,{children:"str"}),", default: ",(0,r.jsx)(n.code,{children:"parent"}),"): Name of the fallback switch state (when no targets are active)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"names"})})," (",(0,r.jsx)(n.em,{children:"dict[node]: str"}),", optional): Dictionary mapping target IDs to custom attribute names for the switch."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"attribute-name-resolution",children:"Attribute Name Resolution"}),"\n",(0,r.jsxs)(n.p,{children:["Switch attribute names are derived from the target IDs, searching in order of priority: ",(0,r.jsx)(n.code,{children:"space"}),", ",(0,r.jsx)(n.code,{children:"hooks"}),", ",(0,r.jsx)(n.code,{children:"ctrls"}),", then ",(0,r.jsx)(n.code,{children:"skin"}),". If a name cannot be meaningfully resolved (e.g., ",(0,r.jsx)(n.code,{children:"leg::skin.0"})," \u2192 ",(0,r.jsx)(n.code,{children:"pin_0"}),"), consider:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Adding a ",(0,r.jsx)(n.a,{href:"tag",children:"tag"})," to the node (",(0,r.jsx)(n.code,{children:"space.name"}),", for example), or"]}),"\n",(0,r.jsxs)(n.li,{children:["Specifying a custom name via the ",(0,r.jsx)(n.code,{children:"names"})," option."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If no ID is present, the name is inferred from the node name with type prefixes removed."}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"space:\n  rest_name: root\n  targets:\n    - *::space.world\n    - *::space.move\n    - *::space.pelvis\n    - *::space.head\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);