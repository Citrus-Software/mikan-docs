"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[87],{7265:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"references/mod/rig/muscle","title":"rig.muscle","description":"Builds a muscle rig that stretches, squashes, and shears between two targets.","source":"@site/docs/references/mod/rig/muscle.md","sourceDirName":"references/mod/rig","slug":"/references/mod/rig/muscle","permalink":"/mikan-docs/docs/references/mod/rig/muscle","draft":false,"unlisted":false,"editUrl":"https://github.com/citrus-software/mikan-docs/tree/main/packages/create-docusaurus/templates/shared/docs/references/mod/rig/muscle.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rig.jiggle","permalink":"/mikan-docs/docs/references/mod/rig/jiggle"},"next":{"title":"rig.path","permalink":"/mikan-docs/docs/references/mod/rig/path"}}');var t=s(4848),i=s(8453);const o={},c="rig.muscle",d={},l=[{value:"Options",id:"options",level:2},{value:"Example",id:"example",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"rigmuscle",children:"rig.muscle"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Builds a muscle rig that stretches, squashes, and shears between two targets."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This modifier creates a fake muscle rig that connects two target nodes and deforms one or more constrained nodes with stretch, squash, and shear behavior."}),"\n",(0,t.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"nodes"})})," (",(0,t.jsx)(n.em,{children:"list[node]"}),", optional): Nodes to be driven by the muscle rig."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"targets"})})," (",(0,t.jsx)(n.em,{children:"list[node]"}),"): Exactly two nodes that serve as the start and end of the muscle (like tendons)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"parent"})})," (",(0,t.jsx)(n.em,{children:"node"}),", optional): Node under which the muscle rig will be parented. Defaults to the parent of the first node in ",(0,t.jsx)(n.code,{children:"nodes"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"hook"})})," (",(0,t.jsx)(n.em,{children:"bool"}),", default: ",(0,t.jsx)(n.code,{children:"false"}),"): If enabled, connects the muscle output to the driven nodes via matrix constraints instead of parenting."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"weight"})})," (",(0,t.jsx)(n.em,{children:"float"}),", optional, default: ",(0,t.jsx)(n.code,{children:"0.0"}),", min: ",(0,t.jsx)(n.code,{children:"0"}),", max: ",(0,t.jsx)(n.code,{children:"1"}),"): Switch weight for blending the hook behavior."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"orient"})})," (",(0,t.jsx)(n.em,{children:"bool"}),", default: ",(0,t.jsx)(n.code,{children:"true"}),"): Whether the tendon rig drives orientation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"scale"})})," (",(0,t.jsx)(n.em,{children:"bool"}),", default: ",(0,t.jsx)(n.code,{children:"true"}),"): Whether the tendon rig drives scale."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"stretch"})})," (",(0,t.jsx)(n.em,{children:"float"}),", optional, default: ",(0,t.jsx)(n.code,{children:"1.0"}),", min: ",(0,t.jsx)(n.code,{children:"0"}),", max: ",(0,t.jsx)(n.code,{children:"1"}),"): Blending value for the stretch behavior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"squash"})})," (",(0,t.jsx)(n.em,{children:"float"}),", optional, default: ",(0,t.jsx)(n.code,{children:"0.0"}),", min: ",(0,t.jsx)(n.code,{children:"0"}),", max: ",(0,t.jsx)(n.code,{children:"1"}),"): Blending value for the squash behavior."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"shear"})})," (",(0,t.jsx)(n.em,{children:"float"}),", optional, default: ",(0,t.jsx)(n.code,{children:"1.0"}),", min: ",(0,t.jsx)(n.code,{children:"0"}),", max: ",(0,t.jsx)(n.code,{children:"1"}),"): Blending value for the shear behavior."]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"name"})})," (",(0,t.jsx)(n.em,{children:"str"}),", optional): Name used for the muscle rig. If not set, defaults to a combination of the target names."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yml",children:"rig.muscle:\n  nodes:\n    - eyebrow_mid::roots.0\n    - eyebrow_crease::roots.0\n  targets:\n    - eyebrow.R::skin.0\n    - eyebrow.L::skin.0\n  orient: false\n  name: eyebrow_mid\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);