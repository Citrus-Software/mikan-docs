"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[906],{6858:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/add_nonlinear_bend-4c11716ed038dc7d9cbbbde13e747631.png"},7850:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"usage/deformers/nonlinear","title":"Non Linears","description":"The setup workflow for non-linear deformers (e.g., Bend, Twist, etc.) is very similar to clusters. The main difference is that non-linear deformers are assigned to a handle (a simple transform) rather than directly to a controller.","source":"@site/docs/usage/deformers/nonlinear.md","sourceDirName":"usage/deformers","slug":"/usage/deformers/nonlinear","permalink":"/mikan-docs/usage/deformers/nonlinear","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lattices (FFD)","permalink":"/mikan-docs/usage/deformers/ffd"},"next":{"title":"Wire","permalink":"/mikan-docs/usage/deformers/wire"}}');var s=r(4848),o=r(8453);const i={},a="Non Linears",d={},c=[{value:"Connecting the attributes to the Rig",id:"connecting-the-attributes-to-the-rig",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"non-linears",children:"Non Linears"})}),"\n",(0,s.jsx)(n.p,{children:"The setup workflow for non-linear deformers (e.g., Bend, Twist, etc.) is very similar to clusters. The main difference is that non-linear deformers are assigned to a handle (a simple transform) rather than directly to a controller."}),"\n",(0,s.jsxs)(n.p,{children:["This is necessary because controllers are positioned for animators, while non-linear deformers often require a specific pivot point and orientation that differs from animator needs. For this reason, we generally use a ",(0,s.jsx)(n.code,{children:"core.xform"})," template module for their handles."]}),"\n",(0,s.jsxs)(n.p,{children:["Once the handle is created, the non-linear deformer is assigned using the ",(0,s.jsx)(n.strong,{children:"Tools > Nonlinear > Add Nonlinear to Controller"})," menu. You then use the same menu interface to assign the target geometries to the deformer."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"add bend",src:r(6858).A+"",width:"523",height:"249"})}),"\n",(0,s.jsx)(n.p,{children:"Adjust the bend settings as needed."}),"\n",(0,s.jsxs)(n.p,{children:["When finished, don\u2019t forget to ",(0,s.jsx)(n.strong,{children:"save this information back to the template"}),", following the save procedure described in the ",(0,s.jsx)(n.a,{href:"/mikan-docs/usage/deformers/overview",children:"Overview"})," section."]}),"\n",(0,s.jsx)(n.h2,{id:"connecting-the-attributes-to-the-rig",children:"Connecting the attributes to the Rig"}),"\n",(0,s.jsx)(n.p,{children:"Once the non-linear deformer is set up and the deformers are saved, you can expose the animation attributes to animators by creating a small rig with modifiers."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a helper node on the handle where you applied the deformer."}),"\n",(0,s.jsx)(n.li,{children:"Add a modifier plug."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"[mod]\nplug:\n  node: tree_bend::ctrls.0\n  bend:\n    keyable: on\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then connect the custom attribute to the animation attribute of the handle using modifiers ",(0,s.jsx)(n.code,{children:"connect"})," or ",(0,s.jsx)(n.code,{children:"expression"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"[mod]\n#!-10\nconnect:\n  node: msh_trunk->nonlinear.0@curvature\n  op: mult\n  inputs:\n    - tree_bend::ctrls.0@bend\n    - 0.5\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"Notice the priority defined for the connect note.\nHere we want the connection to be made after the deformers have been set up.\nBy default, Mikan executes in order:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Template hierarchy"}),"\n",(0,s.jsx)(n.li,{children:"Modifiers"}),"\n",(0,s.jsx)(n.li,{children:"Deformers"}),"\n"]}),(0,s.jsxs)(n.p,{children:["To ensure this connection happens after the deformer setup, we add the note: ",(0,s.jsx)(n.code,{children:"#!-10"}),"."]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);